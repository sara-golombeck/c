# name: CI

# on:
#   push:
#     branches:
#       - main
#       - 'release/**'
#   pull_request:
#     branches:
#       - main
#       - 'release/**'

# jobs:
#   test:
#     runs-on: ubuntu-latest
#     steps:
#       # Step 1: Checkout the code
#       - name: Checkout code
#         uses: actions/checkout@v3

#       # Step 2: Set up Python
#       - name: Set up Python
#         uses: actions/setup-python@v4
#         with:
#           python-version: '3.9'

#       # Step 3: Install dependencies
#       - name: Install dependencies
#         run: |
#           python -m pip install --upgrade pip
#           pip install -r requirements.txt

#       # Step 4: Run tests
#       - name: Run pytest
#         run: |
#           pytest tests/ -v

#   build-and-push:
#     needs: test
#     runs-on: ubuntu-latest
#     # Only run this job on main or release branches, not on PRs
#     if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/heads/release/'))
#     steps:
#       # Step 1: Checkout the code
#       - name: Checkout code
#         uses: actions/checkout@v3

#       # Step 2: Set up Docker
#       - name: Set up Docker
#         uses: docker/setup-buildx-action@v2

#       # Step 3: Calculate new version
#       - name: Calculate new version
#         id: version
#         run: |
#           latest_tag=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
#           echo "Latest tag: $latest_tag"
#           version=$(echo $latest_tag | awk -F. '{printf("v%d.%d.%d", $1+0, $2+0, $3+1)}')
#           echo "New version: $version"
#           echo "version=$version" >> $GITHUB_ENV
#           echo "::set-output name=version::$version"

#       # Step 4: Log in to GHCR
#       - name: Log in to GitHub Container Registry
#         uses: docker/login-action@v2
#         with:
#           registry: ghcr.io
#           username: ${{ github.actor }}
#           password: ${{ secrets.GITHUB_TOKEN }}

#       # Step 5: Build Docker image
#       - name: Build Docker image
#         run: |
#           docker build -t ghcr.io/${{ github.repository_owner }}/convert:${{ env.version }} .
#           docker tag ghcr.io/${{ github.repository_owner }}/convert:${{ env.version }} ghcr.io/${{ github.repository_owner }}/convert:latest
          
#           # Tag with branch name if on a release branch
#           if [[ "${{ github.ref }}" == refs/heads/release/* ]]; then
#             branch_name="${{ github.ref_name }}"
#             docker tag ghcr.io/${{ github.repository_owner }}/convert:${{ env.version }} ghcr.io/${{ github.repository_owner }}/convert:${branch_name}
#           fi

#       # Step 6: Push Docker image to GHCR
#       - name: Push Docker image
#         run: |
#           docker push ghcr.io/${{ github.repository_owner }}/convert:${{ env.version }}
#           docker push ghcr.io/${{ github.repository_owner }}/convert:latest
          
#           # Push branch-specific tag if on a release branch
#           if [[ "${{ github.ref }}" == refs/heads/release/* ]]; then
#             branch_name="${{ github.ref_name }}"
#             docker push ghcr.io/${{ github.repository_owner }}/convert:${branch_name}
#           fi

#       # Step 7: Push Git tag (only on main branch)
#       - name: Push Git tag
#         if: github.ref == 'refs/heads/main'
#         run: |
#           git config user.name "${{ github.actor }}"
#           git config user.email "${{ github.actor }}@users.noreply.github.com"
#           git tag ${{ env.version }}
#           git push origin ${{ env.version }}




# # with release and stable





# name: CI

# on:
#   push:
#     branches:
#       - main
#       - 'release.**'
#   pull_request:
#     branches:
#       - main
#       - 'release.**'

# jobs:
#   test:
#     runs-on: ubuntu-latest
#     steps:
#       # Step 1: Checkout the code
#       - name: Checkout code
#         uses: actions/checkout@v3

#       # Step 2: Set up Python
#       - name: Set up Python
#         uses: actions/setup-python@v4
#         with:
#           python-version: '3.9'

#       # Step 3: Install dependencies
#       - name: Install dependencies
#         run: |
#           python -m pip install --upgrade pip
#           pip install -r requirements.txt

#       # Step 4: Run tests
#       - name: Run pytest
#         run: |
#           pytest tests/ -v

#   build-and-push:
#     needs: test
#     runs-on: ubuntu-latest
#     # Only run this job on main or release branches, not on PRs
#     if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/heads/release.'))
#     steps:
#       # Step 1: Checkout the code with full history
#       - name: Checkout code
#         uses: actions/checkout@v3
#         with:
#           fetch-depth: 0  # Get all history and tags

#       # Step 2: Set up Docker
#       - name: Set up Docker
#         uses: docker/setup-buildx-action@v2

#       # Step 3: Calculate version based on branch type
#       - name: Calculate version
#         id: version
#         run: |
#           if [[ "${{ github.ref }}" == refs/heads/release.* ]]; then
#             # For release branches - calculate version based on branch name
#             base_version=$(echo ${{ github.ref_name }} | cut -d'/' -f2)
            
#             # Find latest tag matching this base version
#             latest_tag=$(git tag -l "${base_version}.*" | sort -V | tail -n1)
            
#             if [ -z "$latest_tag" ]; then
#               # If no previous tag exists for this version
#               version="${base_version}.0"
#             else
#               # Increment the patch number
#               patch=$(echo $latest_tag | cut -d'.' -f3)
#               new_patch=$((patch + 1))
#               version="${base_version}.${new_patch}"
#             fi
            
#             echo "Release version: $version"
#           else
#             # For main branch - development version with timestamp
#             timestamp=$(date +'%Y%m%d%H%M%S')
#             version="dev-${timestamp}"
#             echo "Development version: $version"
#           fi
          
#           echo "version=$version" >> $GITHUB_ENV

#       # Step 4: Log in to GHCR
#       - name: Log in to GitHub Container Registry
#         uses: docker/login-action@v2
#         with:
#           registry: ghcr.io
#           username: ${{ github.actor }}
#           password: ${{ secrets.GITHUB_TOKEN }}

#       # Step 5: Build Docker image
#       - name: Build Docker image
#         run: |
#           # Build with specific version tag
#           docker build -t ghcr.io/${{ github.repository_owner }}/convert:${{ env.version }} .
          
#           # Additional tags based on branch
#           if [[ "${{ github.ref }}" == refs/heads/release.* ]]; then
#             # For release branches - tag with "stable" and branch name
#             branch_name="${{ github.ref_name }}"
#             docker tag ghcr.io/${{ github.repository_owner }}/convert:${{ env.version }} ghcr.io/${{ github.repository_owner }}/convert:${branch_name}
#             docker tag ghcr.io/${{ github.repository_owner }}/convert:${{ env.version }} ghcr.io/${{ github.repository_owner }}/convert:stable
#           else
#             # For main branch - tag with "latest"
#             docker tag ghcr.io/${{ github.repository_owner }}/convert:${{ env.version }} ghcr.io/${{ github.repository_owner }}/convert:latest
#           fi

#       # Step 6: Push Docker image to GHCR
#       - name: Push Docker image
#         run: |
#           # Push version tag
#           docker push ghcr.io/${{ github.repository_owner }}/convert:${{ env.version }}
          
#           # Push additional tags based on branch
#           if [[ "${{ github.ref }}" == refs/heads/release.* ]]; then
#             # For release branches - push "stable" and branch name tags
#             branch_name="${{ github.ref_name }}"
#             docker push ghcr.io/${{ github.repository_owner }}/convert:${branch_name}
#             docker push ghcr.io/${{ github.repository_owner }}/convert:stable
#           else
#             # For main branch - push "latest" tag
#             docker push ghcr.io/${{ github.repository_owner }}/convert:latest
#           fi

#       # Step 7: Create and push Git tag (only on release branches)
#       - name: Create and push Git tag
#         if: startsWith(github.ref, 'refs/heads/release.')
#         run: |
#           git config user.name "${{ github.actor }}"
#           git config user.email "${{ github.actor }}@users.noreply.github.com"
#           git tag ${{ env.version }}
#           git push origin ${{ env.version }}




# # The first with Tests 
# name: CI
# on:
#   push:
#     branches:
#       - main
# jobs:
#   test:
#     runs-on: ubuntu-latest
#     steps:
#       # Step 1: Checkout the code
#       - name: Checkout code
#         uses: actions/checkout@v3
      
#       # Step 2: Set up Python
#       - name: Set up Python
#         uses: actions/setup-python@v4
#         with:
#           python-version: '3.9'
      
#       # Step 3: Install dependencies
#       - name: Install dependencies
#         run: |
#           python -m pip install --upgrade pip
#           pip install -r requirements.txt
      
#       # Step 4: Run tests
#       - name: Run pytest
#         run: |
#           pytest tests/ -v

#   build-and-push:
#     needs: test
#     runs-on: ubuntu-latest
#     steps:
#       # Step 1: Checkout the code
#       - name: Checkout code
#         uses: actions/checkout@v3
      
#       # Step 2: Set up Docker
#       - name: Set up Docker
#         uses: docker/setup-buildx-action@v2
      
#       # Step 3: Calculate new version
#       - name: Calculate new version
#         id: version
#         run: |
#           latest_tag=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
#           echo "Latest tag: $latest_tag"
#           version=$(echo $latest_tag | awk -F. '{printf("v%d.%d.%d", $1+0, $2+0, $3+1)}')
#           echo "New version: $version"
#           echo "version=$version" >> $GITHUB_ENV
#           echo "::set-output name=version::$version"
      
#       # Step 4: Log in to GHCR
#       - name: Log in to GitHub Container Registry
#         uses: docker/login-action@v2
#         with:
#           registry: ghcr.io
#           username: ${{ github.actor }}
#           password: ${{ secrets.GITHUB_TOKEN }}
      
#       # Step 5: Build Docker image
#       - name: Build Docker image
#         run: |
#           docker build -t ghcr.io/${{ github.repository_owner }}/convert:${{ env.version }} .
#           docker tag ghcr.io/${{ github.repository_owner }}/convert:${{ env.version }} ghcr.io/${{ github.repository_owner }}/convert:latest
      
#       # Step 6: Push Docker image to GHCR
#       - name: Push Docker image
#         run: |
#           docker push ghcr.io/${{ github.repository_owner }}/convert:${{ env.version }}
#           docker push ghcr.io/${{ github.repository_owner }}/convert:latest
      
#       # Step 7: Push Git tag
#       - name: Push Git tag
#         run: |
#           git config user.name "${{ github.actor }}"
#           git config user.email "${{ github.actor }}@users.noreply.github.com"
#           git tag ${{ env.version }}
#           git push origin ${{ env.version }}




# The latest
name: CI/CD Pipeline

on:
  push:
    branches:
      - main
      - 'release/**'
  pull_request:
    branches:
      - main
      - 'release/**'

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      # Step 1: Checkout the code
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Fetches all history for tags and branches
        
      # Step 2: Set up Python
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
        
      # Step 3: Install dependencies
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
        
      # Step 4: Run tests
      - name: Run pytest
        run: |
          pytest tests/ -v

  build-and-push:
    needs: test
    # Only run this job for main and release branches, not for PRs
    if: github.event_name == 'push' && (startsWith(github.ref, 'refs/heads/release/') || github.ref == 'refs/heads/main')
    runs-on: ubuntu-latest
    steps:
      # Step 1: Checkout the code
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Fetches all history for tags and branches
        
      # Step 2: Set up Docker
      - name: Set up Docker
        uses: docker/setup-buildx-action@v2
        
      # Step 3: Calculate version based on branch with simpler logic
      - name: Calculate version
        id: version
        run: |
          # Get current branch name
          BRANCH_NAME=${GITHUB_REF#refs/heads/}
          echo "Branch: $BRANCH_NAME"
          
          if [[ "$BRANCH_NAME" == "main" ]]; then
            # For main branch, this is a development version
            timestamp=$(date +'%Y%m%d%H%M%S')
            version="dev-${timestamp}"
            echo "Development version: $version"
          elif [[ "$BRANCH_NAME" =~ ^release/ ]]; then
            # For release branches, extract base version from branch name
            base_version=$(echo $BRANCH_NAME | cut -d'/' -f2)
            
            # Find the latest tag matching this base version
            latest_tag=$(git tag -l "${base_version}.*" | sort -V | tail -n1)
            
            if [ -z "$latest_tag" ]; then
              # If no previous tag exists for this version
              version="${base_version}.0"
            else
              # Increment the patch number
              patch=$(echo $latest_tag | cut -d'.' -f3)
              new_patch=$((patch + 1))
              version="${base_version}.${new_patch}"
            fi
            
            echo "Release version: $version"
          else
            echo "Unsupported branch pattern for versioning"
            exit 1
          fi
          
          echo "version=$version" >> $GITHUB_ENV
        
      # Step 4: Log in to GHCR
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
        
      # Step 5: Build Docker image with appropriate tags
      - name: Build Docker image
        run: |
          # Get current branch name
          BRANCH_NAME=${GITHUB_REF#refs/heads/}
          
          # Build with version tag
          docker build -t ghcr.io/${{ github.repository_owner }}/convert:${{ env.version }} .
          
          # Tag appropriately based on branch
          if [[ "$BRANCH_NAME" == "main" ]]; then
            # Main branch gets 'latest-dev' tag
            docker tag ghcr.io/${{ github.repository_owner }}/convert:${{ env.version }} ghcr.io/${{ github.repository_owner }}/convert:latest-dev
          elif [[ "$BRANCH_NAME" =~ ^release/ ]]; then
            # Create a safe tag name by replacing '/' with '-'
            SAFE_BRANCH_NAME=$(echo ${BRANCH_NAME} | sed 's/\//-/g')
            
            # Release branch gets 'stable' tag
            docker tag ghcr.io/${{ github.repository_owner }}/convert:${{ env.version }} ghcr.io/${{ github.repository_owner }}/convert:stable
            
            # Also tag with safe branch name for specific reference
            docker tag ghcr.io/${{ github.repository_owner }}/convert:${{ env.version }} ghcr.io/${{ github.repository_owner }}/convert:${SAFE_BRANCH_NAME}
          fi
        
      # Step 6: Push Docker image to GHCR
      - name: Push Docker image
        run: |
          # Push version-specific tag
          docker push ghcr.io/${{ github.repository_owner }}/convert:${{ env.version }}
          
          # Get current branch name
          BRANCH_NAME=${GITHUB_REF#refs/heads/}
          
          # Push appropriate additional tags
          if [[ "$BRANCH_NAME" == "main" ]]; then
            docker push ghcr.io/${{ github.repository_owner }}/convert:latest-dev
          elif [[ "$BRANCH_NAME" =~ ^release/ ]]; then
            # Create a safe tag name by replacing '/' with '-'
            SAFE_BRANCH_NAME=$(echo ${BRANCH_NAME} | sed 's/\//-/g')
            
            docker push ghcr.io/${{ github.repository_owner }}/convert:stable
            docker push ghcr.io/${{ github.repository_owner }}/convert:${SAFE_BRANCH_NAME}
          fi
        
      # Step 7: Create and push Git tag (only on release branches)
      - name: Create and push Git tag
        if: startsWith(github.ref, 'refs/heads/release/')
        run: |
          git config user.name "${{ github.actor }}"
          git config user.email "${{ github.actor }}@users.noreply.github.com"
          
          # Only create tag if it doesn't exist yet
          if ! git tag -l | grep -q "^${{ env.version }}$"; then
            # Create a simple tag without annotation
            git tag ${{ env.version }}
            git push origin ${{ env.version }}
            echo "Created and pushed new tag: ${{ env.version }}"
          else
            echo "Tag ${{ env.version }} already exists, skipping tag creation"
          fi