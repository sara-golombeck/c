# name: CI

# on:
#   push:
#     branches:
#       - main

# jobs:
#   build-and-push:
#     runs-on: ubuntu-latest

#     steps:
#       # Step 1: Checkout the code
#       - name: Checkout code
#         uses: actions/checkout@v3

#       # Step 2: Set up Docker
#       - name: Set up Docker
#         uses: docker/setup-buildx-action@v2

#       # Step 3: Calculate new version
#       - name: Calculate new version
#         id: version
#         run: |
#           latest_tag=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
#           echo "Latest tag: $latest_tag"
#           version=$(echo $latest_tag | awk -F. '{printf("v%d.%d.%d", $1+0, $2+0, $3+1)}')
#           echo "New version: $version"
#           echo "version=$version" >> $GITHUB_ENV
#           echo "::set-output name=version::$version"

#       # Step 4: Log in to GHCR
#       - name: Log in to GitHub Container Registry
#         uses: docker/login-action@v2
#         with:
#           registry: ghcr.io
#           username: ${{ github.actor }}
#           password: ${{ secrets.GITHUB_TOKEN }}

#       # Step 5: Build Docker image
#       - name: Build Docker image
#         run: |
#           docker build -t ghcr.io/${{ github.repository_owner }}/convert:${{ env.version }} .
#           docker tag ghcr.io/${{ github.repository_owner }}/convert:${{ env.version }} ghcr.io/${{ github.repository_owner }}/convert:latest

#       # Step 6: Push Docker image to GHCR
#       - name: Push Docker image
#         run: |
#           docker push ghcr.io/${{ github.repository_owner }}/convert:${{ env.version }}
#           docker push ghcr.io/${{ github.repository_owner }}/convert:latest

#       # Step 7: Push Git tag
#       - name: Push Git tag
#         run: |
#           git config user.name "${{ github.actor }}"
#           git config user.email "${{ github.actor }}@users.noreply.github.com"
#           git tag ${{ env.version }}
#           git push origin ${{ env.version }}



name: CI

on:
  push:
    branches:
      - main
      - 'release/**'
  pull_request:
    branches:
      - main
      - 'release/**'

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      # Step 1: Checkout the code
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Build test Docker image 
      - name: Build test Docker image
        run: |
          docker build -t app-test -f Dockerfile .

      # Step 3: Create test directory structure
      - name: Create test directories
        run: |
          mkdir -p output
          mkdir -p test_files
          # Create test JPG file for testing
          echo -n -e \\xff\\xd8\\xff\\xe0\\x00\\x10JFIF | dd of=test_files/test.jpg bs=1

      # Step 4: Run tests with pytest in separate container
      - name: Run tests
        run: |
          # ליצור תיקיות וקבצי בדיקה
          mkdir -p output
          mkdir -p test_files
          
          # להעתיק את קבצי הבדיקה לתיקייה המתאימה
          # יצור קובץ JPG לדוגמה לבדיקות
          echo -e '\xff\xd8\xff\xe0\x00\x10JFIF' > test_files/test.jpg
          
          # להריץ את הבדיקות בתוך הקונטיינר עם הפרמטרים הנכונים
          docker run --rm \
            -v $(pwd)/tests:/app/tests \
            -v $(pwd)/output:/app/output \
            -v $(pwd)/test_files:/app/test_files \
            app-test \
            pytest tests/ -v

  build-and-push:
    needs: test
    runs-on: ubuntu-latest
    # Run only on main or release branches, not on pull requests
    if: github.event_name == 'push' && (startsWith(github.ref, 'refs/heads/main') || startsWith(github.ref, 'refs/heads/release/'))
    steps:
      # Step 1: Checkout the code
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Fetch all history for proper versioning

      # Step 2: Set up Docker
      - name: Set up Docker
        uses: docker/setup-buildx-action@v2

      # Step 3: Calculate new version
      - name: Calculate new version
        id: version
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            # For main branch, increment patch version
            latest_tag=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
            echo "Latest tag: $latest_tag"
            version=$(echo $latest_tag | awk -F. '{printf("v%d.%d.%d", $1+0, $2+0, $3+1)}')
            echo "New version: $version"
          else
            # For release branches, use branch name as version
            branch_name="${{ github.ref }}"
            version=${branch_name#refs/heads/release/}
            echo "Release version: $version"
          fi
          echo "version=$version" >> $GITHUB_ENV
          echo "::set-output name=version::$version"

      # Step 4: Log in to GHCR
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Step 5: Build Docker image
      - name: Build Docker image
        run: |
          docker build -t ghcr.io/${{ github.repository_owner }}/convert:${{ env.version }} .
          
          # Tag as latest only from main branch
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            docker tag ghcr.io/${{ github.repository_owner }}/convert:${{ env.version }} ghcr.io/${{ github.repository_owner }}/convert:latest
          fi

      # Step 6: Push Docker image to GHCR
      - name: Push Docker image
        run: |
          docker push ghcr.io/${{ github.repository_owner }}/convert:${{ env.version }}
          
          # Push latest tag only from main branch
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            docker push ghcr.io/${{ github.repository_owner }}/convert:latest
          fi

      # Step 7: Push Git tag (only from main branch)
      - name: Push Git tag
        if: github.ref == 'refs/heads/main'
        run: |
          git config user.name "${{ github.actor }}"
          git config user.email "${{ github.actor }}@users.noreply.github.com"
          git tag ${{ env.version }}
          git push origin ${{ env.version }}